apiVersion: apps/v1
kind: Deployment
metadata:
  name: devmind-ml-service
  namespace: devmind-pipeline
  labels:
    app: devmind-ml-service
    component: ml-service
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: devmind-ml-service
  template:
    metadata:
      labels:
        app: devmind-ml-service
        component: ml-service
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: devmind-ml-service
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: ml-service
        image: devmind/ml-service:v1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: HOST
          value: "0.0.0.0"
        - name: PORT
          value: "8000"
        - name: WORKERS
          value: "4"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: devmind-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: devmind-secrets
              key: redis-url
        - name: MLFLOW_TRACKING_URI
          valueFrom:
            configMapKeyRef:
              name: devmind-config
              key: mlflow-tracking-uri
        - name: MODEL_STORAGE_PATH
          value: "/models"
        - name: PROMETHEUS_URL
          value: "http://prometheus:9090"
        - name: JAEGER_ENDPOINT
          value: "http://jaeger:14268/api/traces"
        - name: PIPELINE_ENGINE_URL
          value: "http://pipeline-engine:8080"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: model-storage
          mountPath: /models
        - name: config-volume
          mountPath: /config
          readOnly: true
        - name: secrets-volume
          mountPath: /secrets
          readOnly: true
      volumes:
      - name: model-storage
        persistentVolumeClaim:
          claimName: devmind-model-storage
      - name: config-volume
        configMap:
          name: devmind-config
      - name: secrets-volume
        secret:
          secretName: devmind-secrets
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
      - key: "devmind.io/ml-workload"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - devmind-ml-service
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: devmind-ml-service
  namespace: devmind-pipeline
  labels:
    app: devmind-ml-service
    component: ml-service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8000
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app: devmind-ml-service
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: devmind-ml-service
  namespace: devmind-pipeline
  labels:
    app: devmind-ml-service
    component: ml-service
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: devmind-ml-service
  labels:
    app: devmind-ml-service
    component: ml-service
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["tekton.dev"]
  resources: ["pipelineruns", "taskruns"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: ["argoproj.io"]
  resources: ["applications", "appprojects"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: devmind-ml-service
  labels:
    app: devmind-ml-service
    component: ml-service
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: devmind-ml-service
subjects:
- kind: ServiceAccount
  name: devmind-ml-service
  namespace: devmind-pipeline
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: devmind-model-storage
  namespace: devmind-pipeline
  labels:
    app: devmind-ml-service
    component: storage
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: fast-ssd
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: devmind-ml-service-hpa
  namespace: devmind-pipeline
  labels:
    app: devmind-ml-service
    component: ml-service
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: devmind-ml-service
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: ml_inference_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: devmind-ml-service-netpol
  namespace: devmind-pipeline
  labels:
    app: devmind-ml-service
    component: ml-service
spec:
  podSelector:
    matchLabels:
      app: devmind-ml-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: devmind-pipeline
    - podSelector:
        matchLabels:
          app: pipeline-engine
    - podSelector:
        matchLabels:
          app: devmind-web
    ports:
    - protocol: TCP
      port: 8000
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 5000  # MLflow
    - protocol: TCP
      port: 443   # HTTPS
    - protocol: TCP
      port: 80    # HTTP
    - protocol: UDP
      port: 53    # DNS