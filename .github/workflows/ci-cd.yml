name: DevMind Pipeline CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: devmind-pipeline

jobs:
  test-python:
    name: Test Python ML Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd src
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Lint with black and isort
      run: |
        cd src
        black --check .
        isort --check-only .
    
    - name: Type check with mypy
      run: |
        cd src
        mypy . --ignore-missing-imports
    
    - name: Run tests
      run: |
        cd src
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./src/coverage.xml
        flags: python-ml-services
        name: python-ml-coverage

  test-go:
    name: Test Go Pipeline Engine
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache-dependency-path: pipeline/go.sum
    
    - name: Install dependencies
      run: |
        cd pipeline
        go mod download
        go mod verify
    
    - name: Lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: pipeline
    
    - name: Run tests
      run: |
        cd pipeline
        go test -v -race -coverprofile=coverage.out ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./pipeline/coverage.out
        flags: go-pipeline-engine
        name: go-pipeline-coverage

  test-frontend:
    name: Test React Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
    
    - name: Install dependencies
      run: |
        cd web
        npm ci
    
    - name: Lint
      run: |
        cd web
        npm run lint
    
    - name: Type check
      run: |
        cd web
        npm run type-check
    
    - name: Run tests
      run: |
        cd web
        npm run test -- --coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./web/coverage
        flags: react-frontend
        name: react-frontend-coverage

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Python Security Scan
      run: |
        cd src
        pip install safety bandit
        safety check -r requirements.txt
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Go Security Scan
      run: |
        cd pipeline
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec -fmt json -out gosec-report.json ./... || true

  build-images:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: [test-python, test-go, test-frontend, security-scan]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    strategy:
      matrix:
        component: [ml-service, pipeline-engine, web-dashboard]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployments/docker/Dockerfile.${{ matrix.component }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  ai-model-validation:
    name: AI Model Validation
    runs-on: ubuntu-latest
    needs: [test-python]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        cd src
        pip install -r requirements.txt
        pip install mlflow evidently
    
    - name: Validate ML Models
      run: |
        cd ml
        python scripts/validate_models.py
    
    - name: Model Performance Tests
      run: |
        cd ml
        python scripts/performance_tests.py
    
    - name: Generate Model Reports
      run: |
        cd ml
        python scripts/generate_reports.py
    
    - name: Upload Model Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: model-validation-reports
        path: ml/reports/

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, ai-model-validation]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
    
    - name: Deploy to staging
      run: |
        kubectl apply -f deployments/kubernetes/namespace.yaml
        kubectl apply -f deployments/kubernetes/configmap.yaml
        kubectl apply -f deployments/kubernetes/secrets.yaml
        envsubst < deployments/kubernetes/ml-service-deployment.yaml | kubectl apply -f -
        envsubst < deployments/kubernetes/pipeline-engine-deployment.yaml | kubectl apply -f -
        envsubst < deployments/kubernetes/web-dashboard-deployment.yaml | kubectl apply -f -
      env:
        IMAGE_TAG: ${{ github.sha }}
        ENVIRONMENT: staging
    
    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/devmind-ml-service -n devmind-pipeline --timeout=300s
        kubectl rollout status deployment/devmind-pipeline-engine -n devmind-pipeline --timeout=300s
        kubectl rollout status deployment/devmind-web-dashboard -n devmind-pipeline --timeout=300s
    
    - name: Run integration tests
      run: |
        cd tests/integration
        python -m pytest . -v --environment=staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, ai-model-validation]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
    
    - name: Blue-Green Deployment
      run: |
        # Deploy to green environment
        export ENVIRONMENT=production-green
        export IMAGE_TAG=${{ github.event.release.tag_name }}
        envsubst < deployments/kubernetes/ml-service-deployment.yaml | kubectl apply -f -
        envsubst < deployments/kubernetes/pipeline-engine-deployment.yaml | kubectl apply -f -
        envsubst < deployments/kubernetes/web-dashboard-deployment.yaml | kubectl apply -f -
        
        # Wait for green deployment
        kubectl rollout status deployment/devmind-ml-service-green -n devmind-pipeline --timeout=600s
        kubectl rollout status deployment/devmind-pipeline-engine-green -n devmind-pipeline --timeout=600s
        kubectl rollout status deployment/devmind-web-dashboard-green -n devmind-pipeline --timeout=600s
        
        # Run smoke tests
        cd tests/smoke
        python -m pytest . -v --environment=production-green
        
        # Switch traffic to green
        kubectl patch service devmind-ml-service -n devmind-pipeline -p '{"spec":{"selector":{"version":"green"}}}'
        kubectl patch service devmind-pipeline-engine -n devmind-pipeline -p '{"spec":{"selector":{"version":"green"}}}'
        kubectl patch service devmind-web-dashboard -n devmind-pipeline -p '{"spec":{"selector":{"version":"green"}}}'
        
        # Wait and cleanup old blue deployment
        sleep 300
        kubectl delete deployment devmind-ml-service-blue -n devmind-pipeline --ignore-not-found=true
        kubectl delete deployment devmind-pipeline-engine-blue -n devmind-pipeline --ignore-not-found=true
        kubectl delete deployment devmind-web-dashboard-blue -n devmind-pipeline --ignore-not-found=true

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up K6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run performance tests
      run: |
        cd tests/performance
        k6 run --env ENVIRONMENT=staging ml-service-load-test.js
        k6 run --env ENVIRONMENT=staging pipeline-engine-load-test.js
        k6 run --env ENVIRONMENT=staging web-dashboard-load-test.js
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: tests/performance/results/

  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#devops-alerts'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
    
    - name: Create deployment summary
      if: github.event_name == 'release'
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Release**: ${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Type**: Blue-Green" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY