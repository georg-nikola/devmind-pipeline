name: DevMind Pipeline CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: devmind-pipeline

jobs:
  test-python:
    name: Test Python ML Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: src/requirements.txt

    - name: Install dependencies
      run: |
        cd src
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio black isort mypy

    - name: Lint with black and isort
      run: |
        cd src
        black --check .
        isort --check-only .

    - name: Type check with mypy
      run: |
        cd src
        mypy . --ignore-missing-imports || true

    - name: Run tests
      run: |
        cd src
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html || true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./src/coverage.xml
        flags: python-ml-services
        name: python-ml-coverage

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        severity: 'CRITICAL,HIGH'
      continue-on-error: true

    # Note: SARIF upload requires GitHub Advanced Security
    # - name: Upload Trivy scan results to GitHub Security tab
    #   uses: github/codeql-action/upload-sarif@v2
    #   if: always()
    #   with:
    #     sarif_file: 'trivy-results.sarif'

    - name: Python Security Scan
      run: |
        cd src
        pip install safety bandit
        safety check -r requirements.txt || true
        bandit -r . -f json -o bandit-report.json || true

  # Go and Frontend tests disabled until those components are fully implemented
  # test-go:
  #   name: Test Go Pipeline Engine
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  # test-frontend:
  #   name: Test React Frontend
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
